-- controllers/WfcLabController.lua
local WfcLabController = {}
WfcLabController.__index = WfcLabController

function WfcLabController:new(game)
    local instance = setmetatable({}, WfcLabController)
    instance.game = game
    return instance
end

function WfcLabController:getHandledKeys()
    return {
        ["w"] = true, ["e"] = true, ["r"] = true, ["y"] = true,
        ["c"] = true, ["t"] = true, ["h"] = true
    }
end

function WfcLabController:keypressed(key)
    local Game = self.game

    -- WFC Testing Controls
    if key == "w" or key == "e" then
        print("=== Testing WFC Grid Generation ===")
        local NewCityGenService = require("services.NewCityGenService")
        local wfc_params = {
            width = (key == "w") and 32 or 64,
            height = (key == "w") and 24 or 48,
            use_wfc_for_zones = true,
        }
        local result = NewCityGenService.generateDetailedCity(wfc_params)
        if result and result.city_grid then
            Game.lab_grid = result.city_grid
            Game.lab_zone_grid = result.zone_grid
            print("WFC SUCCESS!")
        else
            print("WFC FAILED!")
        end
    end
    
    -- Arterial road generation test
    if key == "r" then
        print("=== Generating and SAVING Arterial Roads ===")
        if Game.lab_grid and Game.lab_zone_grid then
            local NewCityGenService = require("services.NewCityGenService")
            local arterial_params = { num_arterials = 4, min_edge_distance = 15 }
            
            -- This function now returns the paths it generated
            local success, generated_paths = NewCityGenService.generateArterialsOnly(Game.lab_grid, Game.lab_zone_grid, arterial_params)
            
            if success then
                -- Save the control points for the 'Y' key to use
                Game.arterial_control_paths = generated_paths
                print("Arterial road generation SUCCESS! Saved " .. #Game.arterial_control_paths .. " paths.")
            else
                print("Arterial road generation FAILED!")
            end
        else
            print("ERROR: No lab grid available. Press 'W' or 'E' first.")
        end
    end

    -- Smooth overlay visualization key
    if key == "y" then
        print("=== Visualizing Smoothed Overlay from 'R' key data ===")
        if not Game.arterial_control_paths or #Game.arterial_control_paths == 0 then
            print("ERROR: No arterial paths found. Press 'R' to generate them first.")
            return
        end

        local MapGenerationService = require("services.MapGenerationService")
        Game.smooth_highway_overlay_paths = {} -- Clear previous overlay

        for _, control_points in ipairs(Game.arterial_control_paths) do
            -- The spline function gracefully handles paths with too few points
            local spline_path = MapGenerationService._generateSplinePoints(control_points, 10)
            if #spline_path > 1 then
                table.insert(Game.smooth_highway_overlay_paths, spline_path)
            end
        end
        print("Generated " .. #Game.smooth_highway_overlay_paths .. " smooth overlays from saved arterial paths.")
    end
    
    -- Clear test
    if key == "c" then
        Game.lab_grid = nil
        Game.lab_zone_grid = nil
        Game.arterial_control_paths = {} -- Clear saved R-key paths
        Game.smooth_highway_overlay_paths = {} -- Clear Y-key overlay
        print("=== Cleared lab grid and all overlays ===")
    end
    
    if key == "t" then
        Game.show_districts = not Game.show_districts
        print("=== Toggled district visibility to: " .. tostring(Game.show_districts) .. " ===")
    end
    
    if key == "h" then
        print("=== WFC Test Controls ===")
        print("W/E - Generate WFC city grid") 
        print("R - Generate grid-based arterials (and save their paths)")
        print("Y - Draw smooth overlay of the roads generated by 'R'")
        print("C - Clear lab grid and all overlays")
        print("T - Toggle district zone visibility")
        print("H - Show this help")
    end
end

return WfcLabController